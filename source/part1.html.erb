---
  title: Osa 1
  exercise_page: true
  quiz_page: true
  published: true
---


<% partial 'partials/hint', locals: { name: 'Aloituskysely' } do %>

  <p>
    Kurssiin kuuluu muutama kysely, joiden tavoitteena on parantaa kurssia. Vastaa ensimmäiseen kyselyyn osoitteessa <a href="https://elomake.helsinki.fi/lomakkeet/76573/lomake.html"  target="_blank">https://elomake.helsinki.fi/lomakkeet/76573/lomake.html</a>.
  </p>

  <p>
    Käy vastaamassa ensin kyselyyn ja ruksaa sen jälkeen allaoleva tekstikenttä. Jos allaolevan tekstikentän ruksaaminen ei onnistu, varmista että olet kirjautunut tälle sivulle. Kirjautuminen onnistuu sivun oikeasta ylälaidasta.
  </p>

  <%= partial 'partials/quiz', locals: { id: '587a95326b66090004e96c06' } %>

<% end %>




<% partial 'partials/material_heading' do %>
  Ohjelma ja lähdekoodi
<% end %>

<p>
  Tietokoneohjelmia verrataan usein leipomiseen. Tietokone on aloitteleva leipuri, tietokone-ohjelma kokkikirjasta saatu resepti, ja tietokoneen resurssit -- esimerkiksi näyttö, tietokoneelle tallennettu tiedosto ja verkkokortti -- leipomiseen käytettäviä raaka-aineita. Tietokone noudattaa sille annettua reseptiä säntillisesti askel kerrallaan ilman ymmärrystä tai tietoa hamaan ikuisuuteen asti. Jos reseptissä on kirjoitusvirhe, ei tietokone tiedä miten sen tulee toimia. Tietokone ei myöskään osaa reagoida vaikkapa rikkinäiseen uuniin, ellei resepti kerro täsmällisesti miten rikkinäinen uuni tunnistetaan ja mitä uunin rikkoutuessa tulee tehdä.
</p>


<p>
  Aloittelevalla leipurilla ja tietokoneella on muutamia merkittäviä eroja. Tietokone pystyy suorittamaan miljoonia yksittäisiä käskyjä sekunnissa, kun aloittelevalla leipurilla voi mennä yhteen reseptissä olevan käskyn noudattamiseen minuutteja. Toisaalta, aloitteleva leipuri oppii ja kehittyy leipoessaan. Hän voi luovasti kokeilla uusia raaka-aineita ja reseptejä, sekä kehitellä itselleen paremmin sopivia työskentelytapoja. Tietokoneella ei tällaista kehittymiskykyä ole, ellei sitä erikseen -- askel askeleelta -- ole sille annettuun reseptiin kirjoitettu. Tällä kurssilla opit kirjoittamaan tietokoneelle tarkoitettuja reseptejä.
</p>

<p>
  Tietokoneelle annettava resepti eli <strong>ohjelma</strong> on järjestetty joukko ennalta laadittuja käskyjä, joita tietokone noudattaa yksi kerrallaan. Ohjelmoijat eivät tyypillisesti ohjelmoi tietokoneen suoraan ymmärtämiä käskyjä käyttäen, vaan ohjelmoinnissa käytetään ihmisen kirjoitettavaksi ja luettavaksi tarkoitettua ohjelmointikieltä, kuten tällä kurssilla käytettyä <a href="https://en.wikipedia.org/wiki/Java_(programming_language)" target="_blank">Javaa</a>. Ohjelmoijan kirjoittamaa ohjelmakoodia kutsutaan <strong>lähdekoodiksi</strong>. Lähdekoodi käännetään ohjelmaksi tähän erityisesti tarkoitetun ja kirjoitetun kääntäjäohjelman avulla.
</p>


<p>
  Lähdekoodi koostuu lauseista (statement) ja lausekkeista (expression), joita voidaan lukea rivi riviltä ylhäältä alaspäin ja vasemmalta oikealle. Esimerkiksi tekstin "Hei maailma" tulostuksessa käytetään Java-ohjelmointikielellä lausetta:
</p>

<% partial 'partials/code_highlight' do %>
  System.out.println("Hei maailma");
<% end %>

<p>
  Lause <code>System.out.println</code> on Java-ohjelmointikielen valmiiksi tarjoama komento, jota käytetään merkkijonon tulostamiseen. Komento tulostaa sille sulkeiden sisällä hipsuissa annetun merkkijonon. Komennon pääte <code>ln</code> on lyhenne sanasta <em>line</em>, eli komento tulostaa merkkijonon jälkeen myös rivinvaihdon.
</p>

<p>
  Lauseen loppuun kirjoitetaan puolipiste <code>;</code>.
</p>

<% partial 'partials/material_sub_heading' do %>
  Ohjelmarunko
<% end %>

<p>
  Java-ohjelmat vaativat toimiakseen kurssin aikana tutuksi tulevan rungon. Ohjelman runko on seuraavanlainen.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {

        // Tänne kirjoitetaan ohjelman käyttämät lauseet
        System.out.println("Tulostettava teksti");

    }
}
<% end %>

<p>
  Kirjoittamamme ohjelman suoritus alkaa riviä <code>public static void main(String[] args) {</code> seuraavalta riviltä, ja ohjelman suoritus päättyy sulkevaan aaltosulkuun <code>}</code>. Lauseet suoritetaan yksi kerrallaan. Tällä hetkellä ainoa suoritettava lause on <em>System.out.println("Tulostettava teksti");</em>, mikä tulostaa tekstin "Tulostettava teksti".
</p>

<p>
  Jatkossa materiaalin esimerkeissä ei aina erikseen näytetä ohjelmarunkoa, mutta voit olettaa, että se tarvitaan.
</p>


<% partial 'partials/exercise', locals: { name: 'Ada Lovelace' } do %>

  <p>Tehtäväpohjassa on seuraavanlainen ohjelmarunko:</p>

  <% partial 'partials/code_highlight' do %>
public class Nimi {

    public static void main(String[] args) {
        // Kirjoita ohjelmasi tähän alle

    }
}
  <% end %>

  <p>
    Rivi "// Kirjoita ohjelmasi tähän alle" on <em>kommenttirivi</em>, jota tietokone ei ota huomioon ohjelmaa suoritettaessa. Lisää kommenttirivin alle lause, joka tulostaa merkkijonon "Ada Lovelace" ja suorita ohjelma. Ohjelman tulostuksen tulee olla seuraavanlainen:
  </p>

  <% partial 'partials/sample_output' do %>
Ada Lovelace
  <% end %>

  <p>
    Kun olet tehnyt tehtävän ja huomaat, että ohjelma tulostaa halutun merkkijonon, palauta tehtävä TMC:lle. Tutustu tämän jälkeen halutessasi lisää <a href="https://en.wikipedia.org/wiki/Ada_Lovelace" target="_blank">Ada Lovelaceen</a>, joka oli yksi ensimmäisistä ohjelmoijista.
  </p>

<% end %>



<% partial 'partials/hint', locals: { name: 'Lähdekoodin sijainti' } do %>

  <p>
    Lähdekoodi ladataan ja tallennetaan tietokoneen kovalevylle. Näet lähdekoodin tarkemman sijainnin klikkaamalla projektin nimeä (esim. Osa01_01.AdaLovelace) hiiren oikealla näppäimellä ja valitsemalla Properties. Tämä avaa projektiin liittyvän asetusikkunan. Ikkunan Sources-valikossa löytyy tieto projektin kansiosta (Project Folder).
  </p>

  <p>
    Kyseiseen kansioon voi mennä myös ilman NetBeansia. Huomaat, että projektin kansiossa on useita tiedostoja. Lähdekoodit, joita muokkaamme ja luomme tällä kurssilla sijaitsevat aina kansiossa <em>src</em> eli sources.
  </p>

  <p>
    Lähdekooditiedostojen nimi päättyy merkkijonoon <em>.java</em>, ja tiedoston nimi on sama kuin ohjelman nimi. Esimerkiksi jos ohjelma alkaa sanoilla <code>public class Esimerkki</code>, löytyy siihen liittyvä lähdekoodi tiedostosta <code>Esimerkki.java</code>.
  </p>

<% end %>





<% partial 'partials/material_sub_heading' do %>
  Ohjelman osia
<% end %>


<% partial 'partials/material_sub_sub_heading' do %>
  Kommentit
<% end %>


<p>
  Lähdekoodia kirjoitetaan myös muita ohjelmoijia varten, joten siitä halutaan mahdollisimman ymmärrettävää. Ohjelmoija voi kommentoida kirjoittamaansa koodia selkeyttääkseen sitä tai lisätäkseen muistiinpanoja kahdella eri tavalla.
</p>

<ul>
  <li>Yhden rivin kommentit aloitetaan kahdella vinoviivalla, <code>//</code>. Kaikki kahta vinoviivaa seuraava samalla rivillä oleva teksti tulkitaan kommentiksi.</li>
  <li>Useamman rivin kommentit aloitetaan yhdellä vinoviivalla ja tähdellä <code>/*</code> ja lopetetaan tähdellä ja vinoviivalla <code>*/</code>. Kaikki useamman rivin kommentin aloittavan ja lopettavan alueen välillä tulkitaan kommentiksi.</li>
</ul>

<p>
  Alla on esimerkki ohjelmasta, jossa kumpikin kommenttityyppi on käytössä.
</p>


<% partial 'partials/code_highlight' do %>
public class Kommentteja {
    public static void main(String[] args) {

        // Tulostetaan
        System.out.println("Tulostettava teksti");
        System.out.println("Lisää tulostettavaa!");

        /*
          Seuraavaksi:
            - lisää tulostamisesta
            - lisää harjoittelua
            - muuttujat
            - ...
        */

        // System.out.println("Muuta tulostettavaa");
    }
}
<% end %>

<p>
  Esimerkin alin rivi esittelee erityisen kätevän käyttökohteen kommenteille. Kirjoitettua koodia ei tarvitse poistaa jos haluaa tilapäisesti kokeilla jotain.
</p>

<% partial 'partials/exercise', locals: { name: 'Hei Maailma! (Ja Mualima!)' } do %>

  <p>
    Tee ohjelma, jonka tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
Hei Maailma!
(Ja Mualima!)
  <% end %>

<% end %>



<% partial 'partials/material_sub_sub_heading' do %>
  Tulostaminen
<% end %>


<p>Käytimme edellä lausetta <code>System.out.println("tulostettava");</code> merkkijonon tulostamiseen, mutta toinenkin vaihtoehto on olemassa. Tulostamiseen on eri kaksi lausetta:</p>

<ul>
  <li><code>System.out.println("sana");</code> tulostaa tekstin "sana" ja loppurivinvaihdon</li>
  <li><code>System.out.print("sana");</code> tulostaa tekstin "sana" ilman loppurivinvaihtoa</li>
</ul>

<p>Tulostettavan tekstin osana voi olla myös erikoismerkkejä, joista tärkein on rivinvaihto. Rivinvaihto ilmaistaan kenoviivalla ja n-merkillä seuraavasti: <code>\n</code>. Erikoismerkkejä on <a href="http://en.wikipedia.org/wiki/Escape_character" title="Escape character - Wikipedia, the free encyclopedia" target="_blank">muitakin</a>.</p>

<% partial 'partials/code_highlight' do %>
  System.out.println("Ensimmäinen\nToinen\nKolmas");
<% end %>

<p>Ylläoleva lause tulostaa seuraavaa:</p>

<% partial 'partials/sample_output' do %>
Ensimmäinen
Toinen
Kolmas
<% end %>



<% partial 'partials/material_sub_sub_heading' do %>
  Komennon parametrit
<% end %>



<p>
  Tulostuslauseen tulostama tieto eli komennon <em>parametrit</em> annetaan tulostuskomennolle lisäämällä ne lauseen perässä olevien sulkujen <code>()</code> sisään.  Esimerkiksi <code>System.out.println</code> -komennon parametriksi voidaan antaa merkkijono <em>hei</em> hipsujen sisällä seuraavasti: <code>System.out.println("hei")</code>.
</p>



<% partial 'partials/material_sub_sub_heading' do %>
  Puolipiste
<% end %>

<p>Puolipisteellä <code>;</code> erotetaan lauseet toisistaan. Voisimme oikeastaan kirjoittaa koko ohjelman yhdelle riville -- mikä ei kuitenkaan ole kovin ymmärrettävää.</p>

<% partial 'partials/code_highlight' do %>
System.out.print("Hei "); System.out.print("maailma"); System.out.print("!\n");
<% end %>

<% partial 'partials/sample_output' do %>
Hei maailma!
<% end %>

<p>
  Vaikka ylläoleva esimerkki toimii, on rivinvaihtojen käyttö tärkeää muita ohjelmoijia ajatellen. Selkeä lähdekoodin osien erottelu vaatii rivinvaihtojen käyttöä. Tätä ja muita lähdekoodin luettavuuteen liittyviä seikkoja tullaan painottamaan tällä kurssilla.
</p>



<% partial 'partials/material_sub_heading' do %>
  Ohjelmointityylistä
<% end %>


<p>
  Vaikka tietokone ja käyttämämme ohjelmointikieli ei aseta rajoituksia kirjoitettavan ohjelmakoodin ulkoasulle, olemme osana ohjelmoinnin opetuksen ja oppimisen tutkimista huomanneet että ohjelmoijan -- tai opiskelevan ohjelmoijan -- kirjoittaman koodin ulkoasulla on merkitystä myös oppimisen kannalta. Esimerkiksi lähdekoodin luettavuus ja sisennyksen säännönmukaisuus ovat asioita, jotka vaikuttavat lähdekoodin ymmärrettävyyteen, ja sitä kautta myös oppimistuloksiin. Seuraava koodi on säännönmukaisesti sisennettyä.
</p>

<% partial 'partials/code_highlight' do %>
public class Esimerkki {
    public static void main(String[] args) {
        System.out.println("Heippa vaan! Tämä koodi on siististi sisennetty.");
        System.out.println("public class -- ei sisennystä.");
        System.out.println("public static -- neljän merkin sisennys.");
        System.out.println("public static ... sisällä -- kahdeksan merkin sisennys -- tai enemmän.");
    }
}<% end %>


<p>
  Tämä koodi taas ei ole kovin ymmärrettävää.
</p>

<% partial 'partials/code_highlight' do %>
               public class Esimerkki {
    public static void main(String[] args) {
System.out.println("Heippa vaan! Tämä koodi on siististi sisennetty.");
                              System.out.println("public class -- ei sisennystä.");
  System.out.println("public static -- neljän merkin sisennys.");
System.out.println("public static ... sisällä -- kahdeksan merkin sisennys -- tai enemmän.");}}<% end %>

<p>
  Kurssilla käytettävässä Test My Code-ympäristössä tulee mukana Checkstyle-niminen työväline, joka ohjaa hyvään ohjelmointityyliin. Checkstyle tarkistaa mm. koodin sisennystä, metodien nimeämistä, tyhjiä lohkoja ja paljon muuta -- kurssin edetessä nämä käsitteet tulevat tutuiksi. Tällä kurssilla Checkstyle tarkistaa lähes ainoastaan tyylivirheitä -- ohjeita tulee kurssin edetessä.
</p>

<p>
  Tyylivirheet näytetään ohjelmointiympäristössä keltaisella, ja normaalit testi-ilmoitukset punaisella. Kurssilla tutuksi tuleva tehtävän edistymispalkki muuttuu myöskin keltaiseksi, jos koodissa havaitaan tyylivirheitä. Vaikkakin näppäinyhdistelmä alt + shift + f (OS X control + shift + f) auttaa useimpien tyylivirheiden korjaamiseen, on koodia syytä kirjoittaa oikein alusta alkaen.
</p>


<% partial 'partials/hint', locals: { name: 'Lähdekoodi tulee sisentää oikein' } do %>

  <p>
    Javassa koodia sisennetään neljän välilyönnin tai yhden tabulaattorin verran jokaisen lohkon kohdalla. Käytä sisentämiseen joko välilyöntejä tai tabulaattoreita. Joissakin tapauksissa sisennys saattaa hajota mikäli käytät molempia. NetBeans auttaa tässä kun painat kirjainyhdistelmää "alt + shift + f" (OS X "control + shift + f").
  </p>

  <p>
    Jatkossa ohjelmakoodi tulee sisentää oikein myös tehtävissä. Jos sisennys on väärin, ei ohjelmointiympäristö hyväksy tehtävää.
  </p>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Kuusi' } do %>

  <p>
    Tee ohjelma, jonka tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
    *
   ***
  *****
 *******
*********
    *
  <% end %>

<% end %>


<% partial 'partials/hint', locals: { name: 'Lyhenne "sout"' } do %>

  <p>
    Kirjoitit todennäköisesti aika monta kertaa <code>System.out.println("...")</code>. Kokeile kirjoittaa NetBeans:iin (main:in sisään) tyhjälle riville <em>sout</em> ja paina tabulaatoria (näppäin q:n vasemmalla puolella). Mitä tapahtuu? Tämä pieni apuväline säästänee jatkossa runsaasti aikaasi.
  </p>

<% end %>



<% partial 'partials/material_heading' do %>
  Muuttuja ja sijoitus
<% end %>


<p>
  Keskeinen käsite ohjelmoinnissa on <em>muuttuja</em>, jota käytetään tiedon tallentamiseen myöhempää käyttöä varten.
</p>


<% partial 'partials/material_sub_heading' do %>
  Muuttujan  esittely
<% end %>

<p>
  Muuttujaan säilöttävällä tiedolla on aina tyyppi. Tyyppejä ovat esimerkiksi teksti eli merkkijono (<code>String</code>), kokonaisluku (<code>int</code>), liukuluku (<code>double</code>) eli desimaaliluku ja ja totuusarvo (<em>boolean</em>).
</p>

<p>
  Muuttuja esitellään kertomalla ensin sen tyyppi, jota seuraa muuttujalle annettava nimi. Muuttujaan asetetaan arvo yhtäsuuruusmerkillä (<code>=</code>).
</p>

<% partial 'partials/code_highlight' do %>
int kuukausia = 12;
<% end %>

<p>
  Yllä olevassa lauseessa luodaan kokonaisluku-tyyppinen muuttuja <em>(int)</em>, jolle annetaan nimeksi <em>kuukausia</em>. Muuttujaan kuukausia asetetaan arvo 12.  Lause luetaan "muuttuja <em>kuukausia</em> saa <em>arvon</em> 12".
</p>

<p>
  Muuttujan arvo voidaan yhdistää tulostuslauseelle annettavaan parametriin <code>+</code>-merkillä seuraavan esimerkin mukaisesti.
</p>

<% partial 'partials/code_highlight' do %>
String teksti = "sisältää tekstiä";
int kokonaisluku = 123;
double liukuluku = 3.141592653;

System.out.println("Tekstimuuttuja: " + teksti);
System.out.println("Kokonaislukumuuttuja: " + kokonaisluku);
System.out.println("Liukulukumuuttuja: " + liukuluku);
<% end %>


<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
Tekstimuuttuja: sisältää tekstiä
Kokonaislukumuuttuja: 123
Liukulukumuuttuja: 3.141592653
<% end %>

<% partial 'partials/hint', locals: { name: 'Ohjelman suorituksen visualisointi' } do %>


  <p>
    Java-ohjelmien suorituksen etenemistä voi tarkastella alla olevan palvelun avulla. Tässä edellinen esimerkki visualisoituna. Painamalla nappia "Next" ohjelman suoritus etenee.
  </p>
  <div class="code-states-visualizer-widget" data-input='{"code":"public class YourClassNameHere {\n  public static void main(String[] args) {\n    String teksti = \"sisältää tekstiä\";\n    int kokonaisluku = 123;\n    double liukuluku = 3.141592653;\n\n    System.out.println(\"Tekstimuuttuja: \" + teksti);\n    System.out.println(\"Kokonaislukumuuttuja: \" + kokonaisluku);\n    System.out.println(\"Liukulukumuuttuja: \" + liukuluku);\n  }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":4,"stack_to_render":[{"func_name":"main:4","encoded_locals":{"teksti":"sisältää tekstiä"},"ordered_varnames":["teksti"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":5,"stack_to_render":[{"func_name":"main:5","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123},"ordered_varnames":["teksti","kokonaisluku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"7","frame_id":7}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":7,"stack_to_render":[{"func_name":"main:7","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123,"liukuluku":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["teksti","kokonaisluku","liukuluku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"10","frame_id":10}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Tekstimuuttuja: sisältää tekstiä\n","event":"step_line","line":8,"stack_to_render":[{"func_name":"main:8","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123,"liukuluku":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["teksti","kokonaisluku","liukuluku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"13","frame_id":13}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Tekstimuuttuja: sisältää tekstiä\nKokonaislukumuuttuja: 123\n","event":"step_line","line":9,"stack_to_render":[{"func_name":"main:9","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123,"liukuluku":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["teksti","kokonaisluku","liukuluku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"17","frame_id":17}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Tekstimuuttuja: sisältää tekstiä\nKokonaislukumuuttuja: 123\nLiukulukumuuttuja: 3.141592653\n","event":"step_line","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123,"liukuluku":["NUMBER-LITERAL","3.141592653"]},"ordered_varnames":["teksti","kokonaisluku","liukuluku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"21","frame_id":21}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Tekstimuuttuja: sisältää tekstiä\nKokonaislukumuuttuja: 123\nLiukulukumuuttuja: 3.141592653\n","event":"return","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"teksti":"sisältää tekstiä","kokonaisluku":123,"liukuluku":["NUMBER-LITERAL","3.141592653"],"__return__":["VOID"]},"ordered_varnames":["teksti","kokonaisluku","liukuluku","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"22","frame_id":22}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Muuttuvat muuttujat' } do %>

  <p>Tehtäväpohja sisältää ohjelman, joka tulostaa seuraavaa.</p>

  <% partial 'partials/sample_output' do %>
Kanoja:
3
Pekonia (kg):
5.5
Traktori:
Ei ole!

Tässä vielä tiivistelmä:
3
5.5
Ei ole!
  <% end %>

  <p>Muuta ohjelmaa annetuista kohdista niin että tuloste on:</p>

  <% partial 'partials/sample_output' do %>
Kanoja:
9000
Pekonia (kg):
0.1
Traktori:
Zetor

Tässä vielä tiivistelmä:
9000
0.1
Zetor
  <% end %>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Muuttujaan asetetun arvon muuttaminen
<% end %>

<p>
  Muuttujaan asetettu arvo säilyy kunnes muuttujaan asetetaan toinen arvo.  Huomaa että muuttujan tyyppi kirjoitetaan vain kun muuttuja esitellään ohjelmassa ensimmäistä kertaa.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 123;
System.out.println("Muuttujan arvo on " + luku);

luku = 42;
System.out.println("Muuttujan arvo on " + luku);
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
Muuttujan arvo on 123
Muuttujan arvo on 42
<% end %>


<p>
  Tarkastellaan edellisen ohjelmakoodin suoritusta askel askeleelta. Kun muuttuja esitellään ohjelmakoodissa ensimmäistä kertaa, eli sekä muuttujan tyyppi (tässä <code>int</code>) että sen nimi (tässä <code>luku</code>) kerrotaan tietokoneelle, tietokone luo muuttujaa varten "nimetyn lokeron". Tämän jälkeen yhtäsuuruusmerkin oikealla puolella oleva arvo kopioidaan tähän nimettyyn lokeroon.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-1.png"/>

<p>
  Kun ohjelmakoodissa viitataan muuttujaan sen nimellä -- tässä halutaan tulostaa merkkijono "Muuttujan arvo on " sekä muuttujan <code>luku</code> arvo, muuttujan <code>luku</code> arvo haetaan sen nimellä löytyvästä lokerosta.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-2.png"/>

<p>
  Kun muuttujaan asetetaan arvo (tässä <code>luku = 42</code>), tarkistetaan ensin löytyykö muuttujan nimistä lokeroa. Jos lokero löytyy, uusi arvo kopioidaan lokeroon vanhan arvon tilalle ja vanha arvo katoaa. Jos muuttujan nimellä ei löydy lokeroa, ohjelman suoritus päättyy virheilmoitukseen tai ohjelmaa ei voida käynnistää.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-3.png"/>

<p>
  Seuraavaksi ohjelmakoodissa viitataan taas muuttujaan sen nimellä -- tässäkin halutaan tulostaa merkkijono "Muuttujan arvo on " sekä muuttujan <code>luku</code> arvo. Toimitaan kuten normaalisti, eli haetaan muuttujan <code>luku</code> arvo sen nimellä löytyvästä lokerosta.
</p>

<img class="naytto" src="/img/drawings/muuttujan-arvon-vaihto-4.png"/>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan tyyppi pysyy
<% end %>


<p>
  Kun muuttujan tyyppi on kertaalleen määritelty, ei sitä voi enää muuttaa.  Merkkijonoa ei siis voi esimerkiksi asettaa kokonaislukutyyppiseen muuttujaan, eikä merkkijonomuuttujaan voi asettaa kokonaislukua.
</p>

<% partial 'partials/code_highlight' do %>
String merkkijono = "Hei maailma!";
merkkijono = 42; // Ei onnistu

int luku = 10;
merkkijono = luku; // Ei myöskään onnistu
<% end %>

<p>
  Poikkeus kuitenkin löytyy: liukulukutyyppiseen muuttujaan voi asettaa kokonaisluvun, sillä Java osaa muuttaa kokonaisluvun liukuluvuksi asetuksen yhteydessä.
</p>

<% partial 'partials/code_highlight' do %>
double liukuluku = 0.42;
liukuluku = 1; // Onnistuu

int luku = 10;
liukuluku = luku; // Onnistuu myös
<% end %>

<p>
  Liukulukua ei kuitenkaan voi asettaa kokonaislukuun, sillä emme halua että desimaaliarvot leikkautuisivat vahingossa pois.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 4.2; // Ei onnistu

double liukuluku = 0.42;
luku = liukuluku; // Ei myöskään onnistu
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan nimentä
<% end %>


<p>
  Muuttujan nimeämistä rajoittavat tietyt ehdot. Vaikka muuttujan nimessä voidaan käyttää ääkkösiä, on parempi olla <em>kayttamatta niita</em>, sillä <a href="http://en.wikipedia.org/wiki/Character_encoding" title="Character encoding - Wikipedia, the free encyclopedia">merkistökoodauksesta</a> saattaa tulla ongelmia.
</p>

<p>
  Muuttujan nimessä ei saa olla tiettyjä erikoismerkkejä, kuten huutomerkkejä (!).  Välilyönti ei ole sallittu, sillä se erottaa komentojen osat toisistaan. Välilyönti kannattaa korvata <a href="http://fi.wikipedia.org/wiki/CamelCase" title="CamelCase – Wikipedia">camelCase</a><-tyylillä, jolloin nimi <code>muistuttaneeKamelia</code>. <strong>Huom!</strong> Muuttujien nimien ensimmäinen kirjain kirjoitetaan aina pienellä:
</p>

<% partial 'partials/code_highlight' do %>
int camelCaseMuuttuja = 7;
<% end %>

<p>
  Numeroita voidaan käyttää muuttujan nimessä, kunhan nimi ei ala numerolla.  Nimi ei myöskään voi koostua pelkistä numeroista.
</p>

<% partial 'partials/code_highlight' do %>
int 7muuttuja = 4; // Ei sallittu!
int muuttuja7 = 4; // Sallittu, mutta ei kuvaava muuttujan nimi
<% end %>

<p>
  Muuttujan nimi ei myöskään saa olla jo entuudestaan käytössä.  Tälläisiä nimiä ovat mm. aikaisemmin määritellyt muuttujat ja komennot, kuten <code>System.out.print</code> ja <code>System.out.println</code>.
</p>

<% partial 'partials/code_highlight' do %>
int camelCase = 2;
int camelCase = 5; // Ei sallittu -- muuttuja camelCase on jo käytössä!
<% end %>

<p>
  Muuttuja kannattaa nimetä siten, että sen käyttötarkoitus on selvää ilman kommentteja tai miettimistä.  Tällä kurssilla muuttujat <strong>pitää</strong> nimetä kuvaavasti.
</p>


<% partial 'partials/material_sub_sub_heading' do %>
  Sallittuja muuttujien nimiä
<% end %>

<ul>
  <li>kuukaudenViimeinenPaiva = 20</li>
  <li>ensimmainenVuosi = 1952</li>
  <li>nimi = "Essi"</li>
</ul>


<% partial 'partials/material_sub_sub_heading' do %>
  Virheellisiä muuttujien nimiä
<% end %>

<ul>
  <li>kuukauden viimeinen päivä = 20</li>
  <li>1paiva = 1952</li>
  <li>varo! = 1910</li>
  <li>1920 = 1</li>
</ul>


<p>
  <strong>Huom!</strong> Älä myöskään käytä ääkkösiä muuttujien nimissä!
</p>




<% partial 'partials/material_heading' do %>
  Laskentaa
<% end %>


<p>
  Laskentaoperaatiot ovat tuttuja ja suoraviivaisia: yhteenlasku <code>+</code>, erotus <code>-</code>, kertolasku <code>*</code> ja jakolasku <code>/</code>. Laskentajärjestys on myös tuttu: laskenta tehdään vasemmalta oikealle sulut huomioon ottaen. Kuitenkin <code>*</code> ja <code>/</code> lasketaan ennen <code>+</code> ja <code>-</code> operaatioita, samoin kuin perus- tai kansakoulumatematiikassa on tullut tutuksi.
</p>

<p>
  <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html" target="_blank">Tässä vielä tarkemmin laskujärjestyksestä javassa.</a> Linkin takana oleva materiaali ei ole kuitenkaan aloittelijan kannalta kovin oleellista.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 2;
System.out.println(eka); // tulostaa 2
int toka = 4;
System.out.println(toka); // tulostaa 4

int summa = eka + toka; // muuttujaan summa asetetaan muuttujien eka ja toka arvojen summa
System.out.println(summa); // tulostaa 6
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Laskujärjestys ja sulut
<% end %>

<p>
  Laskujärjestykseen voi vaikuttaa sulkujen avulla. Sulkujen sisällä olevat laskuoperaatiot suoritetaan ennen niiden ulkopuolella olevia laskuoperaatioita.
</p>

<% partial 'partials/code_highlight' do %>
int laskuSuluilla = (1 + 1) + 3 * (2 + 5);
System.out.println(laskuSuluilla); // tulostaa 23

int laskuSuluitta = 1 + 1 + 3 * 2 + 5;
System.out.println(laskuSuluitta); // tulostaa 13
<% end %>


<p>Yllä olevan sulkuesimerkin voi suorittaa myös askeleittain.</p>

<% partial 'partials/code_highlight' do %>
int laskuSuluilla = (1 + 1);
System.out.println(laskuSuluilla); // tulostaa 2
laskuSuluilla = laskuSuluilla + 3 * (2 + 5);
System.out.println(laskuSuluilla); // tulostaa 23

int laskuSuluitta = 1 + 1;
laskuSuluitta = laskuSuluitta + 3 * 2;
laskuSuluitta = laskuSuluitta + 5;
System.out.println(laskuSuluitta); // tulostaa 13
<% end %>



<% partial 'partials/exercise', locals: { name: 'Sekunnit vuodessa' } do %>

  <p>Täydennä tehtäväpohjassa olevaa ohjelmaa siten, että se laskee kuinka monta sekuntia on vuodessa. Voit olettaa, että vuodessa on 365 päivää (eli ei ole karkausvuosi).</p>

  <p>Ohjelman tulostus on seuraava:</p>

  <% partial 'partials/sample_output' do %>
Vuodessa on X sekuntia.
  <% end %>

  <p>X:n kohdalle tulee ohjelmasi laskema tulos. Huom! Hyödynnä tässä tehtävässä muuttujia :)</p>

<% end %>



<% partial 'partials/hint', locals: { name: 'Lauseke ja lause' } do %>

  <p>Lauseke (expression) on arvojen yhdistelmä, joka muuntuu arvoksi laskuoperaation tai evaluaation yhteydessä. Alla oleva lause sisältää lausekkeen <code>1 + 1 + 3 * 2 + 5</code>, joka evaluoidaan ennen arvon asetusta muuttujaan.</p>

  <% partial 'partials/code_highlight' do %>
int laskuSuluitta = 1 + 1 + 3 * 2 + 5;
  <% end %>

  <p>Lausekkeen evaluaatio tapahtuu aina ennen muuttujan arvon asetusta. Tarkastele esimerkkiä alla. Jos lauseke evaluoitaisiin vasta tulostuskutsun yhteydessä, olisi tulostus jotain muuta.</p>

  <% partial 'partials/code_highlight' do %>
int eka = 10;
int toka = eka + 5;
eka = 20;

System.out.println(toka); // tulostaa 15
  <% end %>

<% end %>


<p>
  Lausekkeen evaluointi tapahtuu ohjelmakoodissa siinä kohtaa, missä lauseke on. Evaluointi onnistuu siis esimerkiksi myös tulostuslauseen yhteydessä, jos lauseketta käytetään tulostuslauseen parametrin arvon laskemisessa.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 2;
int toka = 4;

System.out.println(eka + toka); // tulostaa 6
System.out.println(2 + toka - eka - toka); // tulostaa 0
<% end %>



<p>
  Lauseke ei myöskään muuta muuttujassa olevaa arvoa, ellei lausekkeen lopputulosta aseteta muuttujan arvoksi tai anneta parametrina esimerkiksi tulostukselle.
</p>

<% partial 'partials/code_highlight' do %>
  int eka = 2;
  int toka = 4;

  // alla oleva lauseke ei edes toimi, sillä lauseketta
  // ei aseteta minkään muuttujan arvoksi tai anneta parametrina
  // tulostuslauseelle
  eka + toka;
<% end %>


<%= partial 'partials/quiz', locals: { id: '5878a0b579db890004df0d1d' } %>



<% partial 'partials/material_sub_heading' do %>
  Merkkijonot osana laskentaa
<% end %>


<p>
  Tarkastellaan vielä lähemmin merkkijonojen yhdistämistä <code>+</code>-merkinnän avulla.
</p>

<p>
  Jos operaatiota <code>+</code> sovelletaan kahden merkkijonon välille, syntyy uusi merkkijono, jossa kaksi merkkijonoa on yhdistetty. Huomaa nokkela välilyönnin käyttö lauseen "muuttujien" osana!
</p>

<% partial 'partials/code_highlight' do %>
String tervehdys = "Hei ";
String nimi = "Matti";
String hyvastely = ", ja näkemiin!";

String lause = tervehdys + nimi + hyvastely;

System.out.println(lause);
<% end %>

<% partial 'partials/sample_output' do %>
Hei Matti, ja näkemiin!
<% end %>

<p>
  Jos toinen operaation <code>+</code> kohteista on merkkijono, muutetaan myös toinen operaation kohteista merkkijonoksi. Alla olevassa esimerkissä kokonaisluku <code>2</code> on muutettu merkkijonoksi "2", ja siihen on yhdistetty merkkijono.
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("tuossa on kokonaisluku --&gt; " + 2);
System.out.println(2 + " &lt;-- tuossa on kokonaisluku");
<% end %>

<% partial 'partials/sample_output' do %>
tuossa on kokonaisluku --&gt; 2
2 &lt;-- tuossa on kokonaisluku
<% end %>

<p>
  Edellä esitellyt laskusäännöt pätevät täälläkin:
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Neljä: " + (2 + 2));
System.out.println("Mutta! kaksikymmentäkaksi: " + 2 + 2);
<% end %>

<% partial 'partials/sample_output' do %>
Neljä: 4
Mutta! kaksikymmentäkaksi: 22
<% end %>

<p>
  Edellistä soveltamalla voimme myös luoda lausekkeen, joka sisältää tekstiä ja muuttujan, ja joka evaluoidaan tulostuksen yhteydessä:
</p>

<% partial 'partials/code_highlight' do %>
int x = 10;

System.out.println("muuttujan x arvo on: " + x);

int y = 5;
int z = 6;

System.out.println("y on " + y + " ja z on " + z);
<% end %>

<p>
  Tulostus:
</p>

<% partial 'partials/sample_output' do %>
muuttujan x arvo on: 10
y on 5 ja z on 6
<% end %>



<% partial 'partials/exercise', locals: { name: 'Yhteenlasku' } do %>

  <p>
    Tee ohjelma, jonka avulla voidaan laskea kahden kokonaisluvun summa. Ohjelman alussa määritellään kaksi muuttujaa, jotka sisältävät summattavat luvut. Voit tarvittaessa käyttää myös muita muuttujia.
  </p>

  <p>
    Esimerkiksi jos muuttujissa on luvut 5 ja 4, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
5 + 4 = 9
  <% end %>

  <p>
    Jos taas muuttujissa on luvut 73457 ja 12888, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
73457 + 12888 = 86345
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Kertolasku' } do %>

  <p>
    Tee edellistä ohjelmaa vastaava ohjelma, joka laskee kahden kokonaislukumuuttujaan sijoitetun arvon kertolaskun.
  </p>

  <p>
    Esimerkiksi jos muuttujissa on luvut 2 ja 8, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
2 * 8 = 16
  <% end %>

  <p>
    Jos taas muuttujissa on luvut 277 ja 111, ohjelman tulostus on seuraava:
  </p>

  <% partial 'partials/sample_output' do %>
277 * 111 = 30747
  <% end %>

  <p>
    Kokeile myös kuinka suuren kertolaskun ohjelmasi pystyy laskemaan!
  </p>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Jakolasku
<% end %>


<p>
  Kokonaislukujen jakolasku on hieman hankalampi operaatio. Jakolausekkeessa käytettyjen muuttujien tyyppi määrää evaluaation tuloksena saatavan arvon tyypin. Jos kaikki jakolausekkeessa olevat muuttujat ovat kokonaislukuja, on tulos myös kokonaisluku.
</p>

<% partial 'partials/code_highlight' do %>
int tulos = 3 / 2;
System.out.println(tulos); // Huom! tulostaa 1 (kokonaisluku), sillä 3 ja 2 ovat myös kokonaislukuja
<% end %>

<% partial 'partials/code_highlight' do %>
int eka = 3:
int toka = 2;
double tulos = eka / toka;
System.out.println(tulos); // nytkin tulostus on 1, sillä eka ja toka ovat kokonaislukuja
<% end %>

<p>
  Jos jakolaskun jakaja tai jaettava (tai molemmat!) ovat liukulukuja, tulee tulokseksi myös liukuluku.
</p>

<% partial 'partials/code_highlight' do %>
double kunJaettavaOnLiukuluku = 3.0 / 2;
System.out.println(kunJaettavaOnLiukuluku); // tulostaa 1.5

double kunJakajaOnLiukuluku = 3 / 2.0;
System.out.println(kunJakajaOnLiukuluku); // tulostaa 1.5
<% end %>

<p>
  Kokonaisluku voidaan tarvittaessa muuttaa liukuluvuksi lisäämällä sen eteen tyyppimuunnosoperaatio <code>(double)</code>:
</p>

<% partial 'partials/code_highlight' do %>
int eka = 3;
int toka = 2;

double tulos1 = (double) eka / toka;
System.out.println(tulos1); // tulostaa 1.5

double tulos2 = eka / (double) toka;
System.out.println(tulos2); // tulostaa 1.5

double tulos3 = (double) (eka / toka);
System.out.println(tulos3); // tulostaa 1
<% end %>

<p>
  Jälkimmäisessä esimerkissä tulos pyöristyy väärin sillä laskuoperaatio kokonaisluvuilla suoritetaan ennen tyyppimuunnosta.
</p>

<p>
  Jos jakolausekkeen tulos asetetaan kokonaislukutyyppiseen muuttujaan, on tulos automaattisesti kokonaisluku.
</p>

<% partial 'partials/code_highlight' do %>
int tulosKokonaislukuKoskaTyyppiKokonaisluku = 3.0 / 2;  // tulos automaattisesti kokonaisluku: 1
<% end %>

<p>
  Seuraava esimerkki tulostaa "1.5", sillä jaettavasta tehdään liukuluku kertomalla se liukuluvulla (1.0 * 3 = 3.0) ennen jakolaskua.
</p>

<% partial 'partials/code_highlight' do %>
int jaettava = 3;
int jakaja = 2;

double tulos = 1.0 * jaettava / jakaja;
System.out.println(tulos);
<% end %>


<% partial 'partials/exercise', locals: { name: 'Kolmen luvun keskiarvo' } do %>

  <p>
    Tehtäväpohjassa on ohjelma, jossa on kolme muuttujaa. Ohjelman tulostus on tällä hetkellä seuraava.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 9
toka: 7
kolmas: 6
  <% end %>

  <p>
    Muokkaa ohjelmaa siten, että ohjelma tulostaa myös muuttujien keskiarvon.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 9
toka: 7
kolmas: 6
keskiarvo: 7.333333333333333
  <% end %>

  <p>
    Huom! Jos muuttujien arvoja muutetaan, tulee myös tulostuksen muuttua.
  </p>

  <% partial 'partials/sample_output' do %>
eka: 5
toka: 7
kolmas: 4
keskiarvo: 5.333333333333333
  <% end %>


<% end %>



<%= partial 'partials/quiz', locals: { id: '5878a2b179db890004df0d1e' } %>



<% partial 'partials/exercise', locals: { name: 'Nelilaskin' } do %>

  <p>Tehtäväpohjassa on ohjelma, jossa on kaksi muuttujaa. Ohjelman tulostus on tällä hetkellä seuraava.</p>

  <% partial 'partials/sample_output' do %>
5 + 3 = 8
  <% end %>

  <p>Muokkaa ohjelmaa siten, että ohjelma laskee myös lukujen erotuksen, tulon, ja jakolaskun.</p>

  <% partial 'partials/sample_output' do %>
5 + 3 = 8
5 - 3 = 2
5 * 3 = 15
5 / 3 = 1.6666666666666667
  <% end %>

  <p>Huom! Jos muuttujien arvoja muutetaan, tulee myös tulostuksen muuttua.</p>

  <% partial 'partials/sample_output' do %>
1 + 3 = 4
1 - 3 = -2
1 * 3 = 3
1 / 3 = 0.3333333333333333
  <% end %>

  <p>Tehtävässä ei ole testejä jotka kertovat onko tulostus oikein vai ei. Tarmista että ohjelmasi toimii oikein ennen tehtävän palautusta suorittamalla se useammalla muuttujien arvoilla.</p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Muuttujan arvoon liittyviä väärinkäsityksiä
<% end %>




<p>Kun tietokone suorittaa ohjelmakoodia, suorittaa se sitä käsky kerrallaan, edeten aina täsmälleen siten, kuin ohjelmakoodissa sanotaan. Kun muuttujaan asetetaan arvo, tapahtuu aina sama asia, eli yhtäsuuruusmerkin oikealla puolella oleva arvo kopioidaan yhtäsuuruusmerkin vasemmalla puolella olevan muuttujan arvoksi, eli muuttujan nimeämään paikkaan.</p>

<p>On tärkeää, että ohjelmoija ymmärtää, että arvon asettaminen muuttujaan tekee aina saman asian.</p>

<p>Kolme yleistä väärinkäsitystä, jotka liittyvät muuttujan arvon asettamiseen ovat seuraavat:</p>

<ul>
  <li>Muuttujan asettamisen näkeminen siirtona kopioimisen sijaan: ohjelmakoodin <code>eka = toka</code> suorituksen jälkeen ajatellaan, että muuttujan <code>toka</code> arvo on siirtynyt muuttujan <code>eka</code> arvoksi, jonka jälkeen muuttujalla <code>toka</code> ei ole enää arvoa, tai sen arvo on esimerkiksi nolla. Tämä ei pidä paikkansa, sillä ohjelmakoodin <code>eka = toka</code> suorituksessa muuttujan <code>toka</code> nimeämässä paikassa oleva arvo kopioidaan muuttujan <code>eka</code> nimeämään paikkaan. Muuttujan <code>toka</code> arvo ei siis muutu.<br/></li>
  <li>Muuttujan asettamisen näkeminen riippuvuutena kopioimisen sijaan: ohjelmakoodin <code>eka = toka</code> suorituksen jälkeen ajatellaan, että mikä tahansa muutos muuttujaan <code>toka</code> vaikuttaa automaattisesti myös muuttujaan <code>eka</code>. Tämä ei pidä paikkansa, sillä asetus -- kopiointi -- on yksittäinen tapahtuma. Se tapahtuu vain silloin, ohjelmakoodi <code>eka = toka</code> suoritetaan.<br/></li>
  <li>Kolmas väärinkäsitys liittyy kopioimisen suuntaan: ohjelmakoodin <code>eka = toka</code> suorituksessa ajatellaan, että muuttujan <code>toka</code> arvoksi kopioidaan muuttujan <code>eka</code> arvo. Tämä näkyy myös tilanteina, missä ohjelmoija voi vahingossa kirjoittaa esimerkiksi <code>42 = arvo</code> -- onneksi ohjelmointiympäristöt tukevat myös tässä.</li>
</ul>

<p>Ehkäpä paras tapa tietokoneen ohjelmakoodin suorittamisen ymmärtämiseen on paperin ja kynän käyttäminen. Kun luet ohjelmakoodia, kirjoita paperille uusien muuttujien nimet, sekä kirjoita ylös rivi riviltä, miten ohjelmakoodissa olevien muuttujien arvot muuttuvat. Havainnollistetaan suoritusta seuraavalla ohjelmakoodilla:</p>

<% partial 'partials/code_highlight' do %>
rivi 1: int eka = (1 + 1);
rivi 2: int toka = eka + 3 * (2 + 5);
rivi 3:
rivi 4: eka = 5;
rivi 5:
rivi 6: int kolmas = eka + toka;
rivi 7: System.out.println(eka);
rivi 8: System.out.println(toka);
rivi 9: System.out.println(kolmas);
<% end %>

<p>Alla on kirjoitettu ylläolevan ohjelmakoodin suoritus auki.</p>

<% partial 'partials/sample_output' do %>
rivi 1: luodaan muuttuja eka
rivi 1: kopioidaan muuttujan eka arvoksi laskun 1 + 1 tulos
rivi 1: muuttujan eka arvo on 2

rivi 2: luodaan muuttuja toka
rivi 2: lasketaan 2 + 5, 2 + 5 ->  7
rivi 2: lasketaan 3 * 7, 3 * 7 -> 21
rivi 2: lasketaan eka + 21
rivi 2: kopioidaan muuttujan eka arvo laskuun, muuttujan eka arvo on 2
rivi 2: lasketaan 2 + 21, 2 + 21 -> 23
rivi 2: kopioidaan muuttujan toka arvoksi 23
rivi 2: muuttujan toka arvo on 23

rivi 3: (tyhjä, ei tehdä mitään)

rivi 4: kopioidaan muuttujan eka arvoksi 5
rivi 4: muuttujan eka arvo on 5

rivi 5: (tyhjä, ei tehdä mitään)

rivi 6: luodaan muuttuja kolmas
rivi 6: lasketaan eka + toka
rivi 6: kopioidaan muuttujan eka arvo laskuun, muuttujan eka arvo on 5
rivi 6: lasketaan 5 + toka
rivi 6: kopioidaan muuttujan toka arvo laskuun, muuttujan toka arvo on 23
rivi 6: lasketaan 5 + 23 -> 28
rivi 6: kopioidaan muuttujan kolmas arvoksi 28
rivi 6: muuttujan kolmas arvo on 28

rivo 7: tulostetaan muuttuja eka
rivi 7: kopioidaan muuttujan eka arvo tulostettavaksi, muuttujan eka arvo on 5
rivi 7: tulostetaan arvo 5

rivi 8: tulostetaan muuttuja toka
rivi 8: kopioidaan muuttujan toka arvo tulostettavaksi, muuttujan toka arvo on 23
rivi 8: tulostetaan arvo 23

rivi 9: tulostetaan muuttuja kolmas
rivi 9: kopioidaan muuttujan kolmas arvo tulostettavaksi, muuttujan kolmas arvo on 28
rivi 9: tulostetaan arvo 28
<% end %>


<p>Alla edellinen ohjelma askeleittain visualisoituna. Käytössä oleva askeleittainen visualisointi käsittelee ohjelmakoodia riveittäin -- pohdi askeleiden kohdalla miten ohjelma päätyy sen tulostamaan lopputulokseen.</p>

<div class="code-states-visualizer-widget" data-input='{"code":"public class LaskentaAskeleittain {\n  public static void main(String[] args) {\n    int eka = (1 + 1);\n    int toka = eka + 3 * (2 + 5);\n\n    eka = 5;\n\n    int kolmas = eka + toka;\n    System.out.println(eka);\n    System.out.println(toka);\n    System.out.println(kolmas);\n  }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":4,"stack_to_render":[{"func_name":"main:4","encoded_locals":{"eka":2},"ordered_varnames":["eka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":6,"stack_to_render":[{"func_name":"main:6","encoded_locals":{"eka":2,"toka":23},"ordered_varnames":["eka","toka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"9","frame_id":9}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":8,"stack_to_render":[{"func_name":"main:8","encoded_locals":{"eka":5,"toka":23},"ordered_varnames":["eka","toka"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"12","frame_id":12}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":9,"stack_to_render":[{"func_name":"main:9","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"17","frame_id":17}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n","event":"step_line","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"21","frame_id":21}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n","event":"step_line","line":11,"stack_to_render":[{"func_name":"main:11","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"24","frame_id":24}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n28\n","event":"step_line","line":12,"stack_to_render":[{"func_name":"main:12","encoded_locals":{"eka":5,"toka":23,"kolmas":28},"ordered_varnames":["eka","toka","kolmas"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"27","frame_id":27}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"5\n23\n28\n","event":"return","line":12,"stack_to_render":[{"func_name":"main:12","encoded_locals":{"eka":5,"toka":23,"kolmas":28,"__return__":["VOID"]},"ordered_varnames":["eka","toka","kolmas","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"28","frame_id":28}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>

<%= partial 'partials/quiz', locals: { id: '5878a3ee79db890004df0d1f' } %>



<% partial 'partials/exercise', locals: { name: 'Jakolaskin' } do %>

  <p>
    Tässä tehtävässä harjoittelet ensimmäistä kertaa tuntemattoman ohjelman muokkaamista. Vaikka suurin osa ohjelmasta tuntuu kryptiseltä, etkä tunne lähdekoodissa käytettyjä sanoja lainkaan, huomaat sieltä todennäköisesti myös tuttuja asioita.
  </p>

  <p>
    Tehtäväpohjaan on toteutettuna graafinen (eli ohjelma avautuu ikkunassa) jakolaskin. Ohjelmassa on kuitenkin pientä häikkää, kuten alla olevasta esimerkistä huomaat.
  </p>

  <img class="naytto" src="/img/exercises/01-10-jakolaskin.png"/>


  <p>
    Etsi vika ja korjaa se. Huomaa, että tässä tehtävässä (ja muissa käyttöliittymiin liittyvissä tehtävissä) automaattiset testit käyttävät hiirtäsi. Älä siis käytä hiirtäsi testien ajon aikana.
  </p>

  <p>
    Huom! Isolla resoluutiolla varustelluissa koneissa on huomattu ongelmia hiirtä liikuttavan testikirjaston kanssa. Jos huomaat, että ohjelmasi toimii kun käynnistät sen itse ja kokeilet sen toimintaa, mutta testien ajaminen epäonnistuu, lähetä tehtävä palvelimelle arvioitavaksi.
  </p>

<% end %>




<% partial 'partials/material_heading' do %>
  Käyttäjän syötteen lukeminen
<% end %>




<p>
  Seuraavaksi tutustumme käyttäjän kirjoittaman tekstin lukemiseen. Käytämme tähän <em>Scanner</em>-apuvälinettä. Apuväline tuodaan käyttöön lisäämällä komento <code>import java.util.Scanner;</code> ennen pääohjelmarungon aloitusta (<code>public class ...</code>).
</p>


<% partial 'partials/code_highlight' do %>
import java.util.Scanner; // tuodaan lukemiseen käytetty apuväline Scanner käyttöömme

public class Esimerkki {

    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        // ohjelmakoodi
    }
}
<% end %>

<p>
  Älä hätäile vaikka pääohjelmarunko saattaa näyttää vaikeaselkoiselta! Jatkamme yhä ohjelmointia kommentilla <em>ohjelmakoodi</em> merkittyyn kohtaan.
</p>



<% partial 'partials/material_sub_heading' do %>
  Merkkijonon lukeminen
<% end %>


<p>
  Seuraava lähdekoodi lukee käyttäjän nimen ja tulostaa tervehdyksen (käyttäjän syöttämä teksti merkitty punaisella):
</p>

<% partial 'partials/code_highlight' do %>
System.out.print("Mikä on nimesi? ");
String nimi = lukija.nextLine(); // Luetaan käyttäjältä rivi tekstiä ja
                                   // asetetaan se muuttujaan nimi

System.out.println("Hei " + nimi);
<% end %>

<% partial 'partials/sample_output' do %>
Mikä on nimesi? <font color="red">Venla</font>
Hei Venla
<% end %>

<p>Seuraavassa on yllä oleva ohjelma pääohjelmarungon kanssa.  Ohjelman nimeksi on asetettu on <em>Tervehdys</em>.</p>

<!--
   -- Käyttäessäsi NetBeans-ohjelmointiympäristöä, toimi kuten alussa olleessa
     <a class="hidden-in-mooc" href="netbeansohje.html">ohjeessa</a>
     <a class="hidden-in-hy" href="http://mooc.fi/courses/general/ohjelmointi/ukk/#netbeansilla-työskentelyä-helpottavia-näppäinkomentoja-ym.">ohjeessa</a>
     tehtiin, mutta muuta ohjelman nimi Heistä (<em>Hei</em>) Tervehdykseksi (<em>Tervehdys</em>)</p>
   -->

<% partial 'partials/code_highlight' do %>
import java.util.Scanner;

public class Tervehdys {

    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        System.out.print("Kenelle sanotaan hei: ");
        String nimi = lukija.nextLine(); // Luetaan käyttäjältä rivi tekstiä ja asetetaan sen arvo muuttujaan nimi

        System.out.println("Hei " + nimi);
    }
}
<% end %>

<p>
  Kun yllä oleva ohjelma ajetaan, pääset kirjoittamaan syötteen.  NetBeansin tulostusvälilehti näyttää ajetun ohjelman jälkeen seuraavalta (alla olevassa esimerkissä käyttäjä syöttää nimen "Venla").
</p>

<div><img class="naytto" src="/img/material/netbeans-output-venla.png"/></div>

<p>
  &nbsp;
</p>

<% partial 'partials/exercise', locals: { name: 'Tulostus kolmesti' } do %>

  <p>
    Tee ohjelma joka lukee käyttäjältä merkkijonon ja tulostaa merkkijonon kolmesti.
  </p>

  <% partial 'partials/sample_output' do %>
Mikä tulostetaan? <font color="red">kukka</font>

kukkakukkakukka
  <% end %>

  <p>
    Esimerkissä punainen väri tarkoittaa käyttäjän kirjoittamaa tekstiä. Tätä käytäntöä noudatetaan jatkossa esimerkeissä.
  </p>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Kokonaisluvun lukeminen
<% end %>


<p>
  Scanner-apuvälineemme ei ole kovin hyvä kokonaislukujen lukemiseen, joten käytämme toista apuvälinettä merkkijonon kokonaisluvuksi muuttamisessa.  Komento <code>Integer.parseInt</code> muuntaa sille annetussa tekstimuuttujassa olevan kokonaisluvun kokonaislukumuuttujaksi.  Komennolle annetaan tekstimuuttuja parametrina, ja se palauttaa kokonaisluvun joka asetetaan kokonaislukumuuttujaan.
</p>

<p>
  Käytännössä kytkemme kaksi komentoa yhteen. Ensin luemme käyttäjältä rivin, jonka annamme heti komennolle <code>Integer.parseInt</code>.
</p>

<% partial 'partials/code_highlight' do %>
System.out.print("Anna kokonaisluku: ");
int kokonaisluku = Integer.parseInt(lukija.nextLine());

System.out.println("Annoit " + kokonaisluku);
<% end %>


<p>
  Seuraavassa esimerkissä käyttäjältä kysytään ensin nimi, ja sen jälkeen ikä. Tällä kertaa esimerkissä on myös ohjelmarunko mukana.
</p>

<% partial 'partials/code_highlight' do %>
import java.util.Scanner;

public class NimiJaIkaTervehdys {
    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        System.out.print("Nimesi: ");
        String nimi = lukija.nextLine();   // Luetaan käyttäjältä rivi tekstiä

        System.out.print("Kuinka vanha olet: ");
        int ika = Integer.parseInt(lukija.nextLine()); // luetaan käyttäjältä tekstimuuttuja ja muutetaan se kokonaisluvuksi

        System.out.println("Nimesi on siis " + nimi + " ja ikäsi " + ika + ", hauska tutustua.");
    }
}
<% end %>

<p>Tulostus esimerkiksi:</p>

<% partial 'partials/sample_output' do %>
Nimesi: <font color="red">Nelli</font>
Kuinka vanha olet: <font color="red">4</font>
Nimesi on siis Nelli ja ikäsi 4, hauska tutustua.
<% end %>



<% partial 'partials/material_sub_heading' do %>
  Lyhyt yhteenveto
<% end %>

<p>
  Käyttäjän kanssa keskustelevan ohjelman runko:
</p>

<% partial 'partials/code_highlight' do %>
import java.util.Scanner;

public class OhjelmanNimi {
    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        // koodi tähän
    }
}
<% end %>

<p>
  Merkkijonon lukeminen:
</p>

<% partial 'partials/code_highlight' do %>
String merkkijono = lukija.nextLine();
<% end %>

<p>
  Kokonaisluvun lukeminen:
</p>

<% partial 'partials/code_highlight' do %>
int kokonaisluku = Integer.parseInt(lukija.nextLine());
<% end %>



<% partial 'partials/exercise', locals: { name: 'Summaaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niiden summan.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">6</font>
Anna toinen luku: <font color="red">2</font>

Lukujen summa: 8
  <% end %>

  <p>
    Kuten aiemminkin, esimerkin punaisella värjätty teksti tarkoittaa käyttäjän kirjoittamaa tekstiä.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Jakaja' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niiden osamäärän. Varmista, että <code>3 / 2 = 1.5</code>. Jos desimaaliosa katoaa, lue uudelleen materiaalin kohta 3.3. Jakolasku.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">3</font>
Anna toinen luku: <font color="red">2</font>

Jakolasku: 3 / 2 = 1.5
  <% end %>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Ympyrän kehän pituus' } do %>


  <p>
    Ympyrän kehän pituus lasketaan kaavalla <code>2 * pii * säde</code>. Tee ohjelma, joka kysyy käyttäjältä ympyrän säteen ja laskee sen perusteella ympyrän kehän pituuden. Javasta löytyy valmis piin arvo, saat sen kirjoittamalla <code>Math.PI</code> laskutoimitukseen.
  </p>

  <% partial 'partials/sample_output' do %>
Anna ympyrän säde: <font color="red">20</font>

Ympyrän kehä: 125.66370614359172
  <% end %>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Ikien summa' } do %>

  <p>
    Tee ohjelma, joka kysyy kahden henkilön nimet ja iät.  Tämän jälkeen ohjelma tulostaa henkilöiden nimet sekä heidän ikien summan.
  </p>

  <% partial 'partials/sample_output' do %>
Kerro nimi: <font color="red">Charles Babbage</font>
Kerro ikä: <font color="red">226</font>

Kerro nimi: <font color="red">Ada Lovelace</font>
Kerro ikä: <font color="red">202</font>

Charles Babbage ja Ada Lovelace ovat yhteensä 428 vuotta vanhoja.
  <% end %>


  <p>
    Kuka ihmeen Charles Babbage? Lue lisää <a href="https://en.wikipedia.org/wiki/Charles_Babbage" target="_blank">Wikipediasta</a>.
  </p>

<% end %>





<% partial 'partials/material_heading' do %>
  Ehtolause
<% end %>



<p>
  Ohjelmamme ovat toistaiseksi edenneet suoraviivaisesti lauseesta seuraavaan, toimien jokaisella suorituskerralla samalla tavalla. Haluamme mahdollisuuden erilaisille ohjelman suorituspoluille. Jotta ohjelman suoritus voisi <em>haarautua</em> esimerkiksi käyttäjän antaman syötteen perusteella, tarvitsemme käyttöömme <strong>ehtolauseen</strong>.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 11;

if (luku &gt; 10) {
    System.out.println("Luku oli suurempi kuin 10");
}
<% end %>

<p>
  Ehtolause alkaa avainsanalla <code>if</code>, jota seuraa sulut. Sulkujen sisälle asetetaan lauseke, joka evaluoidaan kun ehtolause saavutetaan. Sulkuja seuraa lohko, joka määritellään avaavan aaltosulun <code>{</code> ja sulkevan aaltosulun <code>}</code> sisään.
</p>

<p>
  Jos ehtolauseen lauseke evaluoidaan todeksi, ohjelman suoritus siirtyy ehtolauseen määrittelemään lohkoon. Jos taas lauseke on epätotta, ohjelman suoritus siirtyy ehtolauseeseen liittyvän lohkon päättävän aaltosulun jälkeiseen lauseeseen.
</p>

<p>
  Huomaa, että <code>if</code> -lauseen perään ei tule puolipistettä, sillä lause ei lopu ehto-osan jälkeen.
</p>


<% partial 'partials/hint', locals: { name: 'Ohjelmakoodin sisennys' } do %>


  <p>
    Lohkojen sisällä oleva koodi sisennetään. Esimerkiksi ehtolauseeseen liittyvän lohkon sisältämä lähdekoodi sisennetään neljä välilyöntiä sisemmälle kuin ehtolauseen aloittava <code>if</code>-komento. Neljä merkkiä saa myös tabulaattorimerkillä (q:n vasemmalla puolella oleva näppäin). Kun lohko sulkeutuu, eli tulee }-merkki, sisennys loppuu. }-merkki on samalla tasolla kuin ehtolauseen aloittanut <code>if</code>-komento.
  </p>

  <table class="table">
    <thead>
      <tr><th>Väärin</th><th>Oikein</th></tr>
    </thead>
    <tbody>
      <tr>
	<td>
          <% partial 'partials/code_highlight' do %>
if (luku &gt; 10) {
luku = 9;
}<% end %>
	</td>
	<td>
          <% partial 'partials/code_highlight' do %>
if (luku &gt; 10) {
    luku = 9;
}<% end %>
	</td>
      </tr>
    </tbody>
  </table>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Ylinopeussakko' } do %>

  <p>Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja tulostaa merkkijonon "Ylinopeussakko!" jos luku on suurempi kuin 120.</p>

  <% partial 'partials/sample_output' do %>
Kerro nopeus: <font color="red">15</font>
  <% end %>

  <% partial 'partials/sample_output' do %>
Kerro nopeus: <font color="red">135</font>

Ylinopeussakko!
  <% end %>

<% end %>


<% partial 'partials/material_sub_heading' do %>
  Vertailuoperaattorit
<% end %>



<p>
  Vertailuoperaattoreita ovat seuraavat:
</p>

<ul>
  <li><code>&gt;</code>suurempi kuin</li>
  <li><code>&gt;=</code>suurempi tai yhtäsuuri kuin</li>
  <li><code>&lt;</code>pienempi kuin</li>
  <li><code>&lt;=</code> pienempi tai yhtäsuuri kuin</li>
  <li><code>==</code> yhtäsuuri kuin</li>
  <li><code>!=</code> erisuuri kuin</li>
</ul>

<% partial 'partials/code_highlight' do %>
int luku = 55;

if (luku != 0) {
    System.out.println("Luku oli erisuuri kuin 0");
}

if (luku &gt;= 1000) {
    System.out.println("Luku oli vähintään 1000");
}<% end %>



<% partial 'partials/exercise', locals: { name: 'Orwell' } do %>

  <p>Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja tulostaa merkkijonon "Orwell" jos luku on täsmälleen 1984.</p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">1983</font>
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">1984</font>

Orwell
  <% end %>

<% end %>







<% partial 'partials/material_sub_heading' do %>
  Muulloin eli else
<% end %>

<p>
  Jos ehtolauseen sulkujen sisällä oleva lauseke evaluoituu epätodeksi, ohjelmakoodin suoritus siirtyy ehtolauseen lohkon lopettavan aaltosulun seuraavaan lauseeseen. Tämä ei aina ole toivottua, vaan usein halutaan luoda vaihtoehtoinen toiminta tilanteeseen, missä ehtolauseen lauseke on epätotta.
</p>

<p>
  Tämä onnistuu <code>if</code>-komennon yhteydessä käytettävän <code>else</code>-komennon avulla.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 4;

if (luku &gt; 5) {
    System.out.println("Lukusi on suurempi kuin viisi!");
} else {
    System.out.println("Lukusi on viisi tai alle!");
}
<% end %>

<% partial 'partials/sample_output' do %>
  Lukusi on viisi tai alle!
<% end %>

<p>
  Jos ehtolauseeseen on määritelty <code>else</code>-haara, suoritetaan else-haaran määrittelemä lohko jos ehtolauseen ehto ei ole totta. Komento <code>else</code> tulee samalle riville <code>if</code>-komennon määrittelemän lohkon lopettavan aaltosulun kanssa.
</p>

<p>
  Huom! Jos et sisennä em. tavalla, tyylitarkastaja valittaa "Line xx: '}' should be on the same line."
</p>



<% partial 'partials/exercise', locals: { name: 'Positiivinen luku' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun ja kertoo, onko se positiivinen (eli suurempi kuin nolla) vai ei.
  </p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">5</font>

Luku on positiivinen.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">-2</font>

Luku ei ole positiivinen.
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Täysi-ikäisyys' } do %>


  <p>Tee ohjelma, joka kysyy käyttäjän ikää ja kertoo, onko tämä täysi-ikäinen (eli 18-vuotias tai vanhempi).</p>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">12</font>

Et ole täysi-ikäinen!
  <% end %>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">32</font>

Olet täysi-ikäinen!
  <% end %>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Lisää vaihtoehtoja: else if
<% end %>

<p>Jos vaihtoehtoja on useampia käytetään <code>else if</code>-komentoa. Komento <code>else if</code> on kuin <code>else</code>, mutta lisäehdolla. <code>else if</code> tulee <code>if</code>-ehdon jälkeen, ja niitä voi olla useita.</p>

<% partial 'partials/code_highlight' do %>
int luku = 3;

if (luku == 1) {
    System.out.println("Luku on yksi");
} else if (luku == 2) {
    System.out.println("Lukuna on kaksi");
} else if (luku == 3) {
    System.out.println("Kolme lienee lukuna!");
} else {
    System.out.println("Jotain muuta!");
}
<% end %>

<% partial 'partials/sample_output' do %>
Kolme lienee lukuna!
<% end %>


<p>
  Luetaan ylläoleva esimerkki: 'Jos luku on yksi, tulosta "Luku on yksi", muuten jos luku on kaksi, tulosta "Lukuna on kaksi", muuten jos lukuna on kolme, tulosta "Kolme lienee lukuna!".  Muulloin, tulosta "Jotain muuta!"'.
</p>

<p>
  Ylläolevan ohjelman askeleittainen visualisointi:
</p>

<div class="code-states-visualizer-widget" data-input='{"code":"public class Esimerkki {\n  public static void main(String[] args) {\n    int luku = 3;\n    \n    if (luku == 1) {\n      System.out.println(\"Luku on yksi\");\n    } else if (luku == 2) {\n      System.out.println(\"Lukuna on kaksi\");\n    } else if (luku == 3) {\n      System.out.println(\"Kolme lienee lukuna!\");\n    } else {\n      System.out.println(\"Jotain muuta!\");\n    }\n  }\n}","stdin":"","trace":[{"stdout":"","event":"call","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"1","frame_id":1}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":3,"stack_to_render":[{"func_name":"main:3","encoded_locals":{},"ordered_varnames":[],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"2","frame_id":2}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":5,"stack_to_render":[{"func_name":"main:5","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"4","frame_id":4}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":7,"stack_to_render":[{"func_name":"main:7","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"8","frame_id":8}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":9,"stack_to_render":[{"func_name":"main:9","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"12","frame_id":12}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"","event":"step_line","line":10,"stack_to_render":[{"func_name":"main:10","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"16","frame_id":16}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Kolme lienee lukuna!\n","event":"step_line","line":14,"stack_to_render":[{"func_name":"main:14","encoded_locals":{"luku":3},"ordered_varnames":["luku"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"20","frame_id":20}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}},{"stdout":"Kolme lienee lukuna!\n","event":"return","line":14,"stack_to_render":[{"func_name":"main:14","encoded_locals":{"luku":3,"__return__":["VOID"]},"ordered_varnames":["luku","__return__"],"parent_frame_id_list":[],"is_highlighted":true,"is_zombie":false,"is_parent":false,"unique_hash":"21","frame_id":21}],"globals":{},"ordered_globals":[],"func_name":"main","heap":{}}],"userlog":"Debugger VM maxMemory: 455M\n"}'></div>

<% partial 'partials/exercise', locals: { name: 'Suurempi tai yhtäsuuri' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä kaksi kokonaislukua ja tulostaa niistä suuremman. Jos luvut ovat yhtä suuret, ohjelma huomaa myös tämän.
  </p>

  <p>
    Esimerkkitulostuksia:
  </p>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">3</font>

Suurempi luku: 5
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">8</font>

Suurempi luku: 8
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna ensimmäinen luku: <font color="red">5</font>
Anna toinen luku: <font color="red">5</font>

Luvut ovat yhtä suuret!
  <% end %>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Vertailujen suoritusjärjestys
<% end %>

<p>
  Vertailut suoritetaan järjestyksessä ylhäältä alaspäin. Kun suorituksessa päästään lohkoon, jonka ehto on totta, suoritetaan lohko ja lopetetaan vertailu.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 5;

if (luku == 0) {
    System.out.println("Luku on nolla.");
} else if (luku &gt; 0) {
    System.out.println("Luku on suurempi kuin nolla.");
} else if (luku &gt; 2) {
    System.out.println("Luku on suurempi kuin kaksi.");
} else {
    System.out.println("Luku on pienempi kuin nolla.");
}
<% end %>

<% partial 'partials/sample_output' do %>
Luku on suurempi kuin nolla.
<% end %>

<p>
  Yllä oleva esimerkki tulostaa merkkijonon "Luku on suurempi kuin nolla." vaikka myös ehto <code>luku &gt; 2</code> on totta. Vertailu siis lopetetaan ensimmäiseen valintakäskyyn, jonka ehto on totta.
</p>


<% partial 'partials/exercise', locals: { name: 'Arvosanat ja pisteet' } do %>

  <p>
    Tee ohjelma, joka ilmoittaa kurssiarvosanan seuraavan taulukon mukaisesti.
  </p>

  <table class="table">
    <tr>
      <th>pistemäärä</th>
      <th>arvosana</th>
    </tr>
    <tr>
      <td>&lt; 0</td>
      <td>mahdotonta!</td>
    </tr>
    <tr>
      <td>0-50</td>
      <td>hylätty</td>
    </tr>
    <tr>
      <td>51-60</td>
      <td>1</td>
    </tr>
    <tr>
      <td>61-70</td>
      <td>2</td>
    </tr>
    <tr>
      <td>71-80</td>
      <td>3</td>
    </tr>
    <tr>
      <td>81-90</td>
      <td>4</td>
    </tr>
    <tr>
      <td>91-100</td>
      <td>5</td>
    </tr>
    <tr>
      <td>&gt; 100</td>
      <td>uskomatonta!</td>
    </tr>
  </table>

  <p>
    Esimerkkitulostuksia:
  </p>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">37</font>

Arvosana: hylätty
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">76</font>

Arvosana: 3
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">95</font>

Arvosana: 5
  <% end %>


  <% partial 'partials/sample_output' do %>
Anna pisteet [0-100]: <font color="red">-3</font>

Arvosana: mahdotonta!
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Määrä' } do %>


  <p>
    Tehtävän graafiseen käyttöliittymään on lisätty liukuri sekä tekstikenttä.
  </p>

  <img class="naytto" src="/img/exercises/01-22-maara.png"/>

  <p>
    Tutustu ohjelman koodiin ja muokkaa ohjelmaa siten, että tekstikentän arvo muuttuu liukurista saatavien arvojen perusteella seuraavasti:
  </p>

  <ul>
    <li>Jos liukurin arvo on 0, tekstin tulee olla "Ei lainkaan."</li>
    <li>Jos liukurin arvo on 1-25, tekstin tulee olla "Vähän."</li>
    <li>Jos liukurin arvo on 26-74, tekstin tulee olla "Kohtalaisesti."</li>
    <li>Jos liukurin arvo on 75-99, tekstin tulee olla "Paljon."</li>
    <li>Jos liukurin arvo on 100, tekstin tulee olla "Kaikki."</li>
  </ul>

  <p>
    Huomaa tässäkin tehtävässä, ettei sinun tarvitse ymmärtää ohjelmakoodista kuin vain muutamia oleellisia kohtia.
  </p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Loogiset operaatiot
<% end %>


<p>
  Ehtolauseen lauseke voi olla myös monimutkaisempi, yksittäisten loogisten operaatioiden avulla koostettu ehto. Loogisia operaatioita ovat:
</p>

<ul>
  <li><code>lauseke1 &amp;&amp; lauseke2</code> lausekkeen arvo on tosi kun molemmat ehdoista ovat tosia</li>
  <li><code>lauseke1 || lauseke2</code> lausekkeen arvo on tosi jos jompi kumpi tai molemmat ehdoista tosia</li>
</ul>

<p>
  Seuraavassa yhdistetään <code>&amp;&amp;</code>:lla eli ja-operaatiolla kaksi yksittäistä ehtoa. Koodilla tarkistetaan, onko muuttujassa oleva luku suurempi kuin 4 ja pienempi kuin 11, eli siis välillä 5-10:
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Onkohan luku väliltä 5-10: ");
int luku = 7;

if (luku &gt; 4 &amp;&amp; luku &lt; 11) {
    System.out.println("On! :)");
} else {
    System.out.println("Ei ollut :(")
}
<% end %>

<% partial 'partials/sample_output' do %>
Onkohan luku väliltä 5-10:
On! :)
<% end %>

<p>
  Seuraavassa annetaan <code>||</code>:n eli tai-operaation avulla kaksi vaihtoehtoa, onko luku pienempi kuin 0 tai suurempi kuin 100. Ehto toteutuu jos luku täyttää jomman kumman ehdon:
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Onkohan luku pienempi kuin 0 tai suurempi kuin 100");
int luku = 145;

if (luku &lt; 0 || luku &gt; 100) {
    System.out.println("On! :)");
} else {
    System.out.println("Ei ollut :(")
}
<% end %>

<% partial 'partials/sample_output' do %>
Onkohan luku pienempi kuin 0 tai suurempi kuin 100
On! :)
<% end %>


<% partial 'partials/exercise', locals: { name: 'Iän tarkistus' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjän iän ja tarkistaa, että se on mahdollinen (ainakin 0 ja korkeintaan 120).
  </p>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">10</font>
OK
  <% end %>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">55</font>
OK
  <% end %>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">-3</font>
Mahdotonta!
  <% end %>

  <% partial 'partials/sample_output' do %>
Kuinka vanha olet? <font color="red">150</font>
Mahdotonta!
  <% end %>

<% end %>




<% partial 'partials/material_sub_heading' do %>
  Ehtolauseen lauseke ja totuusarvomuuttuja
<% end %>


<p>
  Ehtolauseen sulkuihin asetettavan arvon tulee olla lausekkeen evaluoinnin jälkeen totuusarvotyyppinen. Totuusarvomuuttujan tyyppi on <code>boolean</code> ja arvo <em>true</em> tai <em>false</em>.
</p>

<% partial 'partials/code_highlight' do %>
boolean onkoTotta = true;
System.out.println("Totuusarvomuuttujan arvo on " + onkoTotta);
<% end %>

<% partial 'partials/sample_output' do %>
Totuusarvomuuttujan arvo on true
<% end %>

<p>
  Ehtolauseen voi suorittaa myös seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
boolean onkoTotta = true;

if (onkoTotta) {
    System.out.println("Aika vinhaa!");
}
<% end %>

<% partial 'partials/sample_output' do %>
Aika vinhaa!
<% end %>


<p>
  Vertailuoperaattoreita voi käyttää myös ehtojen ulkopuolella. Tällöin vertailun tuloksena saatu totuusarvo asetetaan talteen totuusarvomuuttujaan myöhempää käyttöä varten.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 1;
int toka = 3;

boolean onkoSuurempi = eka &gt; toka;
<% end %>

<p>
  Yllä olevassa esimerkissä totuusarvomuuttuja <code>onkoSuurempi</code> sisältää nyt totuusarvon <em>false</em>. Yllä olevaa esimerkkiä voi myös jatkaa ja ottaa siihen mukaan ehtolauseen.</p>

<% partial 'partials/code_highlight' do %>
int eka = 1;
int toka = 3;

boolean onkoPienempi = eka &lt; toka;

if (onkoPienempi) {
    System.out.println("1 on pienempi kuin 3!");
}
<% end %>

<img class="naytto" src="/img/drawings/boolean-muuttuja.png"/>

<p>
  Yllä olevassa kuvassa ohjelmakoodia on suoritettu niin pitkään, että ohjelman muuttujat on luotu ja niihin on asetettu arvot. Muuttujassa <code>onkoPienempi</code> on arvona <code>true</code>. Seuraavana suoritetaan vertailu <code>if (onkoPienempi) </code> -- muuttujaan <code>onkoPienempi</code> liittyvä arvo löytyy sen lokerosta, ja lopulta ohjelma tulostaa:
</p>


<% partial 'partials/sample_output' do %>
1 on pienempi kuin 3!
<% end %>



<% partial 'partials/hint', locals: { name: 'Jakojäännös' } do %>

  <p>
    Jakojäännös on hieman harvemmin käytetty operaatio, joka on kuitenkin varsin näppärä kun halutaan tarkistaa esimerkiksi luvun jaollisuutta. Jakojäännösoperaation merkki on <code>%</code>.
  </p>

  <% partial 'partials/code_highlight' do %>
int jakojaannos = 7 % 2;
System.out.println(jakojaannos); // tulostaa 1

System.out.println(5 % 3); // tulostaa 2
System.out.println(7 % 4); // tulostaa 3
System.out.println(8 % 4); // tulostaa 0
System.out.println(1 % 2); // tulostaa 1
  <% end %>

  <p>
    Jos haluamme tietää onko käyttäjän syöttämä luku jaollinen neljälläsadalla, tarkastamme onko syötetyn luvun jakojäännös neljänsadan suhteen nolla.
  </p>


  <% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);
int luku = Integer.parseInt(lukija.nextLine());
int jakojaannos = luku % 400;

if (jakojaannos == 0) {
    System.out.println("Luku " + luku + " on jaollinen neljälläsadalla.");
} else {
    System.out.println("Luku " + luku + " ei ole jaollinen neljälläsadalla.");
}
  <% end %>

  <p>
    Koska jakojäännös on samanlainen operaatio kuin muutkin laskut, voi sen asettaa osaksi valintakäskyä.
  </p>


  <% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);
int luku = Integer.parseInt(lukija.nextLine());

if (luku % 400 == 0) {
    System.out.println("Luku " + luku + " on jaollinen neljälläsadalla.");
} else {
    System.out.println("Luku " + luku + " ei ole jaollinen neljälläsadalla.");
}
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Pariton vai parillinen' } do %>

  <p>Tee ohjelma, joka kysyy käyttäjältä luvun ja ilmoittaa, onko syötetty luku parillinen vai pariton.</p>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">2</font>
Luku 2 on parillinen.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna luku: <font color="red">7</font>
Luku 7 on pariton.
  <% end %>

  <p>Vihje: Luvun jakojäännös 2:lla kertoo, onko luku parillinen vai pariton. Jakojäännos taas saadaan <code>%</code>-operaattorilla, tehtäväpohjassa on lisää ohjeita miten parittomuustarkastus hoituu jakojäännöksen avulla.</p>

<% end %>



<% partial 'partials/material_sub_heading' do %>
  Ehtolauseista ja lohkoista
<% end %>

<p>
  Monimutkaisempien ehtolauseiden muodostamisessa voi hyödyntää sulkuja:
</p>

<% partial 'partials/code_highlight' do %>
int luku = 99;

if ((luku &gt; 0 &amp;&amp; luku &lt; 10) || luku &gt; 100) {
    System.out.println("luku oli joko yhden ja yhdeksän väliltä tai yli sata");
} else {
    System.out.println("luku oli 0 tai pienempi tai väliltä 10-99");
}
<% end %>

<% partial 'partials/sample_output' do %>
  luku oli 0 tai pienempi tai väliltä 10-99
<% end %>

<p>
  Yllä oleva esimerkki toimii käytännössä samoin kuin seuraava esimerkki.
</p>

<% partial 'partials/code_highlight' do %>
int luku = 99;

if (luku &gt; 0 &amp;&amp; luku &lt; 10) {
    System.out.println("luku oli joko yhden ja yhdeksän väliltä tai yli sata");
} else if (luku &gt; 100) {
    System.out.println("luku oli joko yhden ja yhdeksän väliltä tai yli sata");
} else {
    System.out.println("luku oli 0 tai pienempi tai väliltä 10-99");
}
<% end %>


<p>
  Ehtolauseen lohkon sisällä voi olla mitä tahansa koodia, myös toinen ehtolause.
</p>

<% partial 'partials/code_highlight' do %>
int x = 45;
int luku = 55;

if (luku &gt; 0) {
    System.out.println("Luku on positiivinen");

    if (luku &gt; x) {
        System.out.println(" ja suurempi kuin muuttujan x arvo");
        System.out.println("muuttujan x arvohan on " + x);
    }
}
<% end %>




<% partial 'partials/material_sub_heading' do %>
  Merkkijonojen vertailu
<% end %>

<p>
  Yhtäsuuruusoperaattorilla <code>==</code> ja erisuuruusoperaattorilla <code>!=</code> tutkitaan kahden muuttujan arvo samuutta. Tämä toimii esimerkiksi kokonaisluvuilla ja oikeastaan kaikilla muuttujatyypeille, joiden tyyppi alkaa pienellä alkukirjaimella. Merkkijonojen tapauksessa tilanne on kuitenkin toinen.
</p>

<p>
  Tarkastellaan alla olevaa esimerkkiohjelmaa.
</p>


<% partial 'partials/code_highlight' do %>
import java.util.Scanner;

public class MerkkijonojenVertailu {
    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        System.out.println("Syötä kaksi merkkijonoa.");
        String eka = lukija.nextLine();
        String toka = lukija.nextLine();

        if (eka != toka) {
            System.out.println("Syötetyt merkkijonot eivät olleet samat!");
        }
    }
}
<% end %>


<% partial 'partials/sample_output' do %>
  Syötä kaksi merkkijonoa.
  <font color="red">merkkijono</font>
  <font color="red">merkkijono</font>
  Syötetyt merkkijonot eivät olleet samat!
<% end %>



<p>
  Merkkijonoja, eli tekstejä, ei siis voi vertailla yhtäsuuruusoperaatiolla.
</p>

<p>
  Merkkijonojen vertailuun käytetään erillistä <code>equals</code>-komentoa, joka liittyy aina verrattavaan merkkijonoon.
</p>

<% partial 'partials/code_highlight' do %>
String teksti = "kurssi";

if (teksti.equals("marsipaani")) {
    System.out.println("Teksti-muuttujassa on teksti marsipaani.");
} else {
    System.out.println("Teksti-muuttujassa ei ole tekstiä marsipaani.");
}
<% end %>


<p>
  Komento <code>equals</code> liitetään aina siihen verrattavaan tekstimuuttujaan, "tekstimuuttuja piste equals teksti".  Tekstimuuttujaa voidaan myös verrata toiseen tekstimuuttujaan.
</p>

<% partial 'partials/code_highlight' do %>
String teksti = "kurssi";
String toinenTeksti = "pursi";

if (teksti.equals(toinenTeksti)) {
    System.out.println("Samat tekstit!");
} else {
    System.out.println("Ei samat tekstit!");
}
<% end %>

<p>
  Merkkijonoja vertailtaessa on syytä varmistaa että verrattavalla tekstimuuttujalla on arvo.  Jos muuttujalla ei ole arvoa, ohjelma tuottaa virheen <em>NullPointerException</em>, joka tarkoittaa ettei muuttujan arvoa ole asetettu tai se on tyhjä (<em>null</em>).
</p>

<p>
  Seuraavassa käännetään <code>!</code>:n eli negaatio-operaation avulla ehdon arvo päinvastaiseksi:
</p>

<% partial 'partials/code_highlight' do %>
System.out.println("Eihän merkkijono ole 'maito'");
String merkkijono = "piimä";

if (!(merkkijono.equals("maito"))) {  // tosi jos ehto merkkijono.equals("maito") on epätosi
    System.out.println("ei ollut!");
} else {
    System.out.println("oli");
}
<% end %>

<% partial 'partials/sample_output' do %>
ei ollut!
<% end %>


<p>
  Negaatio-operaatio, eli <code>!ehto</code>, kääntää siis totuusarvon ympäri.
</p>

<% partial 'partials/code_highlight' do %>
int eka = 1;
int toka = 3;

boolean onkoSuurempi = eka &gt; toka;

if (!onkoSuurempi) {
    System.out.println("1 ei ole suurempi kuin 3");
}
<% end %>

<% partial 'partials/sample_output' do %>
1 ei ole suurempi kuin 3
<% end %>


<p>
  Tämä ilmiö selvenee myöhemmin kurssilla.
</p>



<% partial 'partials/exercise', locals: { name: 'Merkkijonojen vertailu' } do %>

  <p>
    Tehtäväpohjassa on yritetty luoda ohjelma kahden merkkijonon vertailuun. Lähdekoodi on tällä hetkellä seuraava:
  </p>


  <% partial 'partials/code_highlight' do %>
import java.util.Scanner;

public class MerkkijonojenVertailu {
    public static void main(String[] args) {
        Scanner lukija = new Scanner(System.in);

        System.out.println("Syötä kaksi merkkijonoa.");
        String eka = lukija.nextLine();
        String toka = lukija.nextLine();

        if (eka == toka) {
            System.out.println("Syötetyt merkkijonot olivat samat!");
        } else {
            System.out.println("Syötetyt merkkijonot eivät olleet samat!");
        }
    }
}
  <% end %>

  <p>Ohjelma ei kuitenkaan toimi halutulla tavalla. Korjaa se.</p>


<% end %>


<% partial 'partials/exercise', locals: { name: 'Onko totta' } do %>

  <p>
    Tee ohjelma, joka pyytää käyttäjää kirjoittamaan merkkijonon. Jos käyttäjä kirjoittaa merkkijonon "totta", tulostetaan merkkijono "Oikein meni!", muulloin tulostetaan merkkijono "Koitappa uudelleen!".
  </p>

  <% partial 'partials/sample_output' do %>
Kirjoita merkkijono: <font color="red">totta</font>
Oikein meni!
  <% end %>

  <% partial 'partials/sample_output' do %>
Kirjoita merkkijono: <font color="red">tottapa</font>
Koitappa uudelleen!
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Käyttäjätunnukset' } do %>

  <p>
    Tee ohjelma, joka tunnistaa seuraavat käyttäjät:
  </p>

  <table border style="margin-left:50px">
    <tr>
      <th>tunnus</th>
      <th>salasana</th>
    </tr>
    <tr>
      <td>aleksi</td>
      <td>tappara</td>
    </tr>
    <tr>
      <td>elina</td>
      <td>kissa</td>
    </tr>
  </table>

  <p>
    Ohjelma näyttää käyttäjälle henkilökohtaisen viestin tai ilmoittaa, jos tunnus tai salasana on väärin.
  </p>

  <% partial 'partials/sample_output' do %>
Anna tunnus: <font color="red">aleksi</font>
Anna salasana: <font color="red">tappara</font>
Hei aleksi, olet kirjautunut järjestelmään
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna tunnus: <font color="red">elina</font>
Anna salasana: <font color="red">kissa</font>
Hei elina, olet kirjautunut järjestelmään
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna tunnus: <font color="red">aleksi</font>
Anna salasana: <font color="red">jokerit</font>
Virheellinen tunnus tai salasana!
  <% end %>

<% end %>







<% partial 'partials/material_heading' do %>
  Virhetilanteet ja ongelman ratkaiseminen askel kerrallaan
<% end %>


<p>
  Ohjelmia luodessa niihin päätyy virheitä. Joskus virheet eivät ole niin vakavia, ja aiheuttavat päänvaivaa lähinnä ohjelman käyttäjälle, mutta joskus virheet voivat johtaa hyvinkin vakaviin seurauksiin. Varmaa on joka tapauksessa se, että ohjelmoimaan opetteleva ihminen tekee paljon virheitä.
</p>

<p>
  Tätä ei kuitenkaan kannata missään nimessä pelätä tai välttää, sillä virheitä tekemällä oppii parhaiten. Pyri siis myös välillä rikkomaan työstämääsi ohjelmaa, jolloin pääset tutkimaan virheilmoitusta ja tarkastelemaan kertooko virheilmoitus jotain tekemästäsi virheestä.
</p>




<% partial 'partials/hint', locals: { name: 'Ohjelmistovirhe' } do %>

  <p>
    Osoitteessa <a href="http://sunnyday.mit.edu/accidents/MCO_report.pdf" target="_blank">http://sunnyday.mit.edu/accidents/MCO_report.pdf</a> oleva raportti kuvaa erään hieman vakavamman ohjelmistovirheestä johtuneen tapaturman, sekä ohjelmistovirheen.
  </p>

  <p>
    Ohjelmistovirhe liittyi siihen, että käytetty ohjelma odotti, että ohjelmoija käyttäisi <a href="https://fi.wikipedia.org/wiki/Kansainv%C3%A4linen_yksikk%C3%B6j%C3%A4rjestelm%C3%A4" target="_blank">kansainvälistä yksikköjärjestelmää</a> laskuissa (metrit, kilogrammat, ...). Ohjelmoija oli kuitenkin käyttänyt <a href="https://en.wikipedia.org/wiki/English_Engineering_units" target="_blank">amerikkalaista mittajärjestelmää</a> erään järjestelmän osan laskuissa, jolloin satelliitin navigointiin liittynyt automaattinen korjausjärjestelmä ei toiminut oikein.
  </p>

  <p>
    Satelliitti tuhoutui.
  </p>


<% end %>


<p>
  Ohjelmien muuttuessa monimutkaisemmiksi, tulee virheiden löytämisestäkin haastavampaa. NetBeansiin integroitu debuggeri voi olla avuksi virheiden löytämisessä. Seuraavalla screencastilla esitellään debuggerin käyttöä. Screencast esittelee myös miten projekteja voidaan luoda, avata ja sulkea sekä miten ohjelmia voidaan suorittaa NetBeansin ulkopuolella. Screencastissa on myös asioita, joita kurssilla ei vielä ole tullut -- älä huoli, nämä tulevat vastaan opintojen edetessä.
</p>

<a href="http://www.youtube.com/watch?feature=player_embedded&v=2QlbAvDPmk8" class="youtube" height="300" target="_blank"><img src=" https://www.cs.helsinki.fi/group/java/k13/ohpe/img/youtube.jpg"/></a>

<% partial 'partials/material_sub_heading' do %>
  Stack trace
<% end %>


<p>
  Kun ohjelmassa tapahtuu virhe, se tyypillisesti tulostaa ns. stack tracen, eli niiden metodikutsujen listan, joiden seurauksena virhetilanne syntyi. Stack trace voi näyttää esimerkiksi seuraavalta:
</p>

<% partial 'partials/sample_output' do %>
Exception in thread "main" ...
        at Ohjelma.main(Ohjelma.java:15)
<% end %>

<p>
  Listan alussa kerrotaan minkälainen virhe tapahtui (tässä ...), ja seuraavalla rivillä kerrotaan missä virhe tapahtui. Rivi "at Ohjelma.main(Ohjelma.java:15)" sanoo, että virhe tapahtui Ohjelma.java-tiedoston rivillä 15.
</p>

<% partial 'partials/sample_output' do %>
        at Ohjelma.main(Ohjelma.java:15)
<% end %>


<% partial 'partials/material_sub_heading' do %>
  Muistilista virheenselvitykseen
<% end %>

<p>
  Jos koodisi ei toimi etkä tiedä missä on virhe, näillä askeleilla pääset alkuun.
</p>

<ol>
  <li>Sisennä koodisi oikein ja selvitä, puuttuuko sulkuja.</li>
  <li>Tarkista ovatko käytetyt muuttujat oikean nimisiä.</li>
  <li>Testaa ohjelman kulkua erilaisilla syötteillä, ja selvitä minkälaisella syötteellä ohjelma ei toimi halutusti. Jos sait virheen testeistä, testit saattavat myös kertoa käytetyn syötteen.</li>
  <li>Lisää ohjelmaan tulostuskomentoja, joissa tulostat käytettävien muuttujien arvoja ohjelman suorituksen eri vaiheissa.</li>
  <li>Tarkista, että kaikki käyttämäsi muuttujat on alustettu. Jos tätä ei ole tehty, seuraa virhe NullPointerException.</li>
  <li>Jos ohjelmasi aiheuttaa poikkeuksen, kannattaa ehdottomasti kiinnittää huomiota poikkeuksen yhteydessä olevaan <em>stack traceen</em>, eli niiden metodikutsujen listaan, minkä seurauksena poikkeuksen aiheuttanut tilanne syntyi.</li>
  <li>Opettele käyttämään debuggeria, aiemmin nähdyllä videolla pääsee alkuun.</li>
</ol>




<% partial 'partials/material_sub_heading' do %>
  Ongelman ratkaiseminen osa kerrallaan
<% end %>


<p>
  Tutustutaan klassiseen ohjelmointiongelmaan:
</p>

<p><em>
  'Kirjoita ohjelma, joka kysyy käyttäjältä lukua yhden ja sadan väliltä ja tulostaa luvun. Jos luku on kolmella jaollinen, luvun sijaan tulostetaan "Fizz". Jos luku on viidellä jaollinen, luvun sijaan tulostetaan "Buzz". Jos luku on sekä kolmellä että viidellä jaollinen, luvun sijaan tulostetaan "FizzBuzz"'.
</em></p>

<p>
  Ohjelmoija lähtee ratkaisemaan tehtävää lukemalla ongelmakuvauksen, ja luomalla ohjelmakoodia ongelmakuvausta seuraten. Koska ohjelman suoritusehdot esitellään ongelmassa annetussa järjestyksessä, muodostuu ohjelman rakenne järjestyksen perusteella. Ohjelman rakenne muodostuu seuraavien askelten perusteella:
</p>

<ol>
  <li>Tee ohjelma, joka lukee luvun käyttäjältä ja tulostaa sen.</li>
  <li>Jos luku on jaollinen kolmella, tulosta luvun sijaan merkkijono "Fizz".</li>
  <li>Jos luku on jaollinen viidellä, tulosta luvun sijaan merkkijono "Buzz".</li>
  <li>Jos luku on jaollinen kolmella ja viidellä, tulosta luvun sijan merkkijono "FizzBuzz".</li>
</ol>

<p>
  Jos-tyyppiset ehdot on helppo toteuttaa <code>if - else if - else</code> -valintakäskyjen avulla. Alla oleva koodi on toteutettu ylläolevien askelten perusteella, mutta se ei kuitenkaan toimi oikein. Miksi ei? Kokeile itse!
</p>

<% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);

int luku = Integer.parseInt(lukija.nextLine());

if (luku % 3 == 0) {
    System.out.println("Fizz");
} else if (luku % 5 == 0) {
    System.out.println("Buzz");
} else if (luku % 3 == 0 && luku % 5 == 0) {
    System.out.println("FizzBuzz");
} else {
    System.out.println(luku);
}
<% end %>


<p>
  Alla kerrotaan syy edellisen ohjelman toimimattomuuteen.
</p>



<% partial 'partials/material_sub_sub_heading' do %>
  Valintakäskyjen suoritusjärjestyksestä
<% end %>

<p>
  Edellisessä lähestymistavassa ongelmana on se, että <em>valintakäskyjen läpikäynti lopetetaan ensimmäiseen ehtoon, jonka arvo on totta</em>. Esimerkiksi luvulla 15 tulostetaan merkkijono "Fizz", sillä luku on kolmella jaollinen (15 % 3 == 0).
</p>

<p>
  Yksi lähestymistapa ylläolevan ajatusketjun kehittämiseen on ensin etsiä <em>vaativin ehto</em> ja toteuttaa se. Tämän jälkeen toteutettaisiin muut ehdot. Yllä olevassa esimerkissä ehto "jos luku on jaollinen kolmella <strong>ja</strong> viidellä" vaatii kahden tapauksen toteutumista. Nyt ajatusketju olisi muotoa.
</p>

<ol>
  <li>Tee ohjelma, joka lukee luvun käyttäjältä ja tulostaa sen.</li>
  <li>Jos luku on jaollinen kolmella ja viidellä, tulosta luvun sijan merkkijono "FizzBuzz".</li>
  <li>Jos luku on jaollinen kolmella, tulosta luvun sijaan merkkijono "Fizz".</li>
  <li>Jos luku on jaollinen viidellä, tulosta luvun sijaan merkkijono "Buzz".</li>
</ol>

<p>Nyt ongelmakin tuntuu ratkeavan.</p>

<% partial 'partials/code_highlight' do %>
Scanner lukija = new Scanner(System.in);

int luku = Integer.parseInt(lukija.nextLine());

if (luku % 3 == 0 && luku % 5 == 0) {
    System.out.println("FizzBuzz");
} else if (luku % 3 == 0) {
    System.out.println("Fizz");
} else if (luku % 5 == 0) {
    System.out.println("Buzz");
} else {
    System.out.println(luku);
}
<% end %>



<% partial 'partials/exercise', locals: { name: 'Karkausvuosi' } do %>


  <p>
    Vuosi on karkausvuosi, jos se on jaollinen 4:llä. Kuitenkin jos vuosi on jaollinen 100:lla, se on karkausvuosi vain silloin, kun se on jaollinen myös 400:lla.
  </p>

  <p>
    Tee ohjelma, joka lukee käyttäjältä vuosiluvun, ja tarkistaa, onko vuosi karkausvuosi.
  </p>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2011</font>
Vuosi ei ole karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2012</font>
Vuosi on karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">1800</font>
Vuosi ei ole karkausvuosi.
  <% end %>

  <% partial 'partials/sample_output' do %>
Anna vuosi: <font color="red">2000</font>
Vuosi on karkausvuosi.
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Laskin' } do %>


  <p>
    Toteuta laskin, joka tarjoaa plus, miinus, kerto sekä jakolaskutoiminnallisuuden. Alla on kuvattu laskimelta toivottu toiminallisuus.
  </p>

  <% partial 'partials/sample_output' do %>
    Anna ensimmäinen luku: <font color="red">7</font>
    Anna toinen luku: <font color="red">1</font>
    Anna operaatio: <font color="red">+</font>

    7 + 1 = 8
  <% end %>

  <% partial 'partials/sample_output' do %>
    Anna ensimmäinen luku: <font color="red">5</font>
    Anna toinen luku: <font color="red">3</font>
    Anna operaatio: <font color="red">-</font>

    5 - 3 = 2
  <% end %>

  <% partial 'partials/sample_output' do %>
    Anna ensimmäinen luku: <font color="red">22</font>
    Anna toinen luku: <font color="red">3</font>
    Anna operaatio: <font color="red">*</font>

    22 * 3 = 66
  <% end %>

  <% partial 'partials/sample_output' do %>
    Anna ensimmäinen luku: <font color="red">17</font>
    Anna toinen luku: <font color="red">3</font>
    Anna operaatio: <font color="red">/</font>

    17 / 3 = 5.666666666666667
  <% end %>

<% end %>



<% partial 'partials/exercise', locals: { name: 'Jahtaus' } do %>


  <p>
    Osan viimeisessä tehtävässä pääset taas tarkastelemaan melko tuntematonta lähdekoodia. Tehtävässä on valmiiksi toteutettuna ohjelma, missä hymiö seuraa hiirtä.
  </p>

  <img class="naytto" src="/img/exercises/01-30-jahtaus.png"/>

  <p>
    Tehtävänäsi on muokata ohjelmaa siten, että hymiö ei koskaan osu hiireen. Kun saat hiirtä välttävän ohjelman tehtyä, voit halutessasi alkaa miettimään miten hymiö voisi vältellä hiirtä.
  </p>

  <p>
    Lähdekoodissa on valmiina muuttujia, joiden avulla voit tarkastella hiiren ja hymiön nykyistä ja edellistä sijaintia. Näistä lienee hyötyä. Saat esimerkiksi laskettua hiiren liikkeen x-akselilla muuttujien <code>vanhaHiirenX</code> ja <code>hiirenX</code> avulla. Voit myös selvittää tämän tiedon avulla kulkeeko hiiri hymiötä kohti.
  </p>

  <p>
    Tehtävässä ei ole erillisiä automaattisia testejä. Palauta tehtävä kun olet saavuttanut tavoitteen -- palautukseksi kelpaa siis myös ohjelma, missä hiirellä ei koskaan osuta hymiöön.
  </p>

<% end %>



<p>
  Ensimmäinen osio päättyy tähän. Takanasi on jo ainakin 30 erilaista ohjelmaa -- jos osa on jäänyt epäselviksi, kannattaa niihin palata myöhemmin kurssilla.
</p>


<%= partial 'partials/quiz', locals: { id: '587a99b46b66090004e96c08' } %>
